"""
<Program Name>
  client.r2py

<Started>
  July 24, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  A smartphone acts as a client that reports to router its movement.
"""

# need this library for random number generation
# will be removed after adding Thomas's code
dy_import_module_symbols('random.r2py')


def deserializepacket(packet):    
  """
  Returns the sequence of the packet, and payload length in bits.
  """
  seq, payload = packet.split("|")
  return (seq, len(packet)*8)  # 1 byte = 8 bits


def getmovement():    
  """
  Returns the user holding this phone is moving or not.
  """    
  # TODO: replace this with Thomas's code
  flip = randomfloat()
  if flip > 0.5:
    amimove = 1
  else: 
    amimove = 0
  return amimove


def logifdebug(DEBUG, string):
  """
  Prints out string if DEBUG == 1.
  """
  if DEBUG == 1:
    log(string + '\n')
  else: 
    return 
  

############ main program ############

DEBUG = 0  # output some debug messages if DEBUG == 1
           # TODO: make this a command line arg
CYCLE = 1  # time duration to calculate throughput

(localip, localport) = (getmyip(), 63101)
# IB: Make the IP a command line arg.
(destip, destport) = ('128.189.201.34', 63100) # TODO: this needs to be router's IP

log(getmyip() + '\n')

phonelistensocket = listenformessage(localip, localport)

ack = ''       # string for sending back ack
packet = ''    # string for received packet on phonelistensocket
totalbits = 0   # record total bits received over a CYCLE 
lastchecktime = getruntime()   # record total time spent over a CYCLE 

while True: 
  try:
    remoteip, remoteport, packet = phonelistensocket.getmessage()      
  except SocketWouldBlockError:
    pass

  if packet != '':  # when we received real data
    (seq, payloadlen) = deserializepacket(packet)
    logifdebug(DEBUG, "received " + seq + "th packet.\n")
    totalbits = totalbits + payloadlen  
    packet = '' 
    currenttime = getruntime()
    totaltime = currenttime - lastchecktime

    if totaltime > CYCLE:
      # check throughput and movement every CYCLE sec
      lastchecktime = currenttime # reset clock
      throughput = float(totalbits)/(totaltime)/1000000 
      log("recv rate: " + str(throughput) + " Mbps\n")
      totalbits = 0  # reset bits
      move = getmovement()
      ack = seq + "|" + str(move)
    else:
      ack = seq

    # send back ack!     
    sendmessage(destip, destport, ack, localip, localport)
