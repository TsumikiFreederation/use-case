"""
<Program Name>
  router.r2py

<Started>
  July 24, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Router as the data sender, for the use case of rate adaptation.
"""

############ define protocol parameters ############ 
LENGTH = 9200    # packet length (change for different tx rates)
SEQ = 1          # sequence number of packets, starting from 1
WIN = 10     # check packet loss every WIN ack
DEBUG = 0     # output some debug messages if DEBUG == 1


def getlocalipport():
  localip = getmyip()
  localport = 63100
  return (localip, localport)


def getdestipport():
  destip = getmyip()  # this needs to be changed to phone's IP
  destport = 63101
  return (destip, destport)


def translatemessage(message):
  if "|" in message:
    seq, move = message.split("|")
  else:
    seq = message
    move = None
  return (seq, move)


def recvack(routerlistensocket, sequence):

  def ack():
    while True:
      try:
        # receive ack and movement hint from client
        remoteip, remoteport, message = routerlistensocket.getmessage()
        (seq, move) = translatemessage(message)

        try:   
          for t in sequence:
            if t[0] == int(seq): 
              sequence.remove(t)
              break
        except ValueError:
          log(seq + " not in the sequence of pkts sent.\n")
          pass

        if DEBUG == 1:
          if move != None:
            log("received " + seq + "th packet. movement: " + move + "\n")
          else:
            log("received " + seq + "th packet. no movement.\n")
          log("after received " + seq + "th packet, seq queue: " + str(sequence) + "\n")

      except SocketWouldBlockError:
        pass

  return ack


def checkRTT(RTT, sequence):

  def rtt():
    log("in checkRTT: RTT over last " + str(WIN) + " packets: " + str(RTT) + ' s.\n')
    for s in sequence:
      if getruntime() > s[1] + RTT: # timeout
        # TODO: signal packet loss 
        log(str(s) + " timeout!\n")

  return rtt


############ main program ############ 

(localip, localport) = getlocalipport()
(destip, destport) = getdestipport()

# router's socket for client's ack
routerlistensocket = listenformessage(localip, localport)

# initial variables
starttime = getruntime()
sequence = []
RTT = 0.1  # initially set to a large value

# thread that receives acks
createthread(recvack(routerlistensocket, sequence))
createthread(checkRTT(RTT, sequence))

while True:
  # router send a bunch of packets to the client
  packet = [SEQ, '0'*LENGTH]
  sequence.append((SEQ, getruntime()))  # record the sent seq and time

  sendmessage(destip, destport, str(packet), localip, localport)

  if DEBUG == 1:
    log("sending " + str(SEQ) + "th packet. sending seq queue: " + str(sequence) + "\n")

  if SEQ != 0 and SEQ % WIN == 0:  # the first two WINs are warm up
    # check pkt loss   
    sumrtts = getruntime() - starttime
    RTT = sumrtts/WIN
    #log("RTT over last " + str(WIN) + " packets: " + str(RTT) + ' sec.\n')

  SEQ = SEQ + 1
  starttime = getruntime()