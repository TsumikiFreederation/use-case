"""
<Program Name>
  router.r2py

<Started>
  July 24, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Router as the data sender, for the use case of rate adaptation.
"""

############ define protocol parameters ############ 
LENGTH = 2000    # packet length (change for different tx rates)
SEQ = 1          # sequence number of packets, starting from 1
WIN = 10     # check packet loss every WIN ack
DEBUG = 0     # output some debug messages if DEBUG == 1 
              # TODO: make this a command line arg
              

def getlocalipport():
  localip = getmyip()
  localport = 63100
  return (localip, localport)


def getdestipport():
  destip = getmyip()  # TODO: this needs to be a phone's IP
  destport = 63101
  return (destip, destport)


def translatemessage(message):
  if "|" in message:
    seq, move = message.split("|")
  else:
    seq = message
    move = None
  return (seq, move)


def estimateRTT(recentobservedRTTs):
  # return the max value of recent RTTs
  return max(recentobservedRTTs)


def recvack(routerlistensocket, sequence, recentobservedRTTs):

  def ack(): 

    while True:
      try:
        # receive ack and movement hint from client
        remoteip, remoteport, message = routerlistensocket.getmessage()
        recvtime = getruntime()
        (seq, move) = translatemessage(message)  # TODO: use movement info
             
        if int(seq) in sequence:  
          # delete seq upon ack
          sendtime = sequence[int(seq)]
          del sequence[int(seq)]
          rtt = recvtime - sendtime
          if DEBUG == 1:
            log(seq + "th pkt received. send time: " + str(sendtime) + 
                "  receive time: " + str(recvtime) + "  rtt: " + str(rtt) 
                + ". seq queue: " + str(sequence) + "\n") 

          recentobservedRTTs.append(rtt)
          if len(recentobservedRTTs) > WIN: 
            # update RTT for every WIN packets
            recentobservedRTTs.pop(0)

          if DEBUG == 1:
            log("recentobservedRTTs: " + str(recentobservedRTTs) + "\n\n")
            
        else:
          log(seq + "th pkt is received before sent, or has been deleted due to timeout.\n")                

      except SocketWouldBlockError:
        pass

  return ack


def checkRTT(recentobservedRTTs, sequence):

  def rtt():

    while True:
      if len(recentobservedRTTs) < WIN: # need at least WIN pkts
        continue 

      delseq = []
      updatedRTT = estimateRTT(recentobservedRTTs)
      for (id, sendtime) in sequence.items():
        if sendtime < getruntime() - updatedRTT*2:
          if DEBUG == 1:
            log(str(id) + "th packet too old.. delete\n")
          delseq.append(id)

      for i in delseq:
        try:
          del sequence[i]
        except KeyError:
          # at this point, previously recorded id could already  
          # be deleted by the recvack thread
          log(str(i) + "th not in the sequence (already received?).\n")
          pass

      if DEBUG == 1:
        log("after checkRTT, sequence: " + str(sequence) + "\n")

      sleep(updatedRTT*2)

  return rtt


############ main program ############ 

(localip, localport) = getlocalipport()
(destip, destport) = getdestipport()

# router's socket for client's ack
routerlistensocket = listenformessage(localip, localport)

# initial variables
starttime = getruntime()
sequence = {}
recentobservedRTTs = []  # initially set to a large value
totallen = 0   # record total bytes received
totaltime = 0

# thread that receives acks
createthread(recvack(routerlistensocket, sequence, recentobservedRTTs))
createthread(checkRTT(recentobservedRTTs, sequence))

while True: 
  # router sends a bunch of packets to the client
  packet = [SEQ, '0'*LENGTH]  
  sequence[SEQ] = getruntime()  # record (seq, sendtime)
  
  if DEBUG == 1:
    log("sending " + str(SEQ) + "th packet. sending sequence: " 
        + str(sequence) + "\n")
  
  sendmessage(destip, destport, str(packet), localip, localport)

  if recentobservedRTTs != []:
    sleep(estimateRTT(recentobservedRTTs))

  SEQ = SEQ + 1

