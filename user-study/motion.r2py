"""
motion.r2py -- Sensibility Testbed code for determining and indicating
movement of cellphone user

Thomas Pierce, UBC, Canada
Yanyan Zhuang, UBC/NYU

"""

def filter():
    """
    Returns the square root of the sum of squares of the 3 acceleration directions (X,Y,Z), 
    which have been collected by the phone and filtered as per:
    http://seattlesensor.wordpress.com/2013/01/01/accelerometer-sensor-data-processing/
    """
    a = 0.1
    sensor_data = [None, None, None]

    # Ensure accel. data properly collected and assigned to sensor_data
    while(sensor_data[0] == None or sensor_data[1] == None  or sensor_data[2] == None):
        sensor_data = request_data(sensor_socket, 'sensorsReadAccelerometer', [])

    Xi =  sensor_data[0]
    Yi =  sensor_data[1]
    Zi =  sensor_data[2]

    X0 =  accel[0]
    Y0 =  accel[1]
    Z0 =  accel[2]

    # Apply high-pass filter
    Xh = Xi - (a*X0 + (1-a)*Xi)
    Yh = Yi - (a*Y0 + (1-a)*Yi)
    Zh = Zi - (a*Z0 + (1-a)*Zi)

    # Apply low-pass filter
    Xl = Xh * a + X0 * (1 - a)
    Yl = Yh * a + Y0 * (1 - a)
    Zl = Zh * a + Z0 * (1 - a)

    # Return square root of sum of squares
    return [(Xl ** 2 + Yl ** 2 + Zl ** 2) ** 0.5, Xl, Yl, Zl]




def recvmovement(listensocket):
  """
  A receiving thread that receives movement info from a phone/tablet.
  """
  
  while True:
    try:     
      # receive packets from sender
      remoteip, remoteport, message = listensocket.getmessage()
      log(message + '\n')
    except SocketWouldBlockError:
      pass

      
def movement_detect():
  """
  A mobile device detects movement.
  """
  port = get_connectionport()
  sensor_socket = getconnection(port)
  result = request_data(sensor_socket, 'startSensingTimed', [1, 50])

  accel = [0,0,0]
  t = 0

  # Start by collecting accel. data for 100 loops, but only use data after 
  # first 50 loops, when the filtered accel. data has plateaued.

  # Phone should be motionless during this time
  for i in range (1, 150):
    try:
        [ss, Xl, Yl, Zl] = filter()
        accel = [Xl, Yl, Zl]
        
        if (i > 99):
            t += ss

        sleep(0.05)

    except Exception as e:
        log(str(e), '\n')
        sensor_socket.close()
        raise

  # Average collected data to use as threshold
  t = t/50
  sensor_data = request_data(sensor_socket, 'ttsSpeak', ['Threshold set to ' + str(round(t, 3))])

  # Thresholds for indicating start/stop of movements
  tStop = t * 0.065
  tStart = t * 0.075

  # Count is used as a marker of how many times you have significantly exceeded the threshold
  count = 0
  # Moving is the flag indicating whether or not the user is moving
  moving = False

  while(True):
    try:
        [ss, Xl, Yl, Zl] = filter()
        accel = [Xl, Yl, Zl]

        if (moving):
            if ((t - tStop) < ss < (t + tStop)):
                # It takes more "counts" to "stop" moving than to "start" moving, to avoid indicating a
                # stopped user, when theyare only changing acceleration (i.e. if phone in is pants pocket)
                if (count == 5):
                    sensor_data = request_data(sensor_socket, 'ttsSpeak', ["Stop"])
                    moving = False
                    count = 0
                else:
                    count += 1
            else:
                count = 0
        else:
            if ((t - tStart) > ss or ss > (t + tStart)):
                if (count == 2):
                    sensor_data = request_data(sensor_socket, 'ttsSpeak', ["Start"])
                    moving = True
                    count = 0
                else:
                    count += 1
            else:
                count = 0

        sleep(0.01)

    except Exception as e:
        log(str(e), '\n')
        sensor_socket.close()
        raise

  request_data(sensor_socket, 'stopSensing', [])
  sensor_socket.close()

  
# the list of dest IP to send movement info to (hard coded) 
destlist = ['198.162.52.244', '142.103.165.215']  
        
try:
  dy_import_module_symbols("sensorlib.r2py")
except Exception: 
  (localip, localport) = (getmyip(), 63101)
  listensocket = listenformessage(localip, localport)
  log("I'm not a mobile device. But I'm listening on " + localip + '....\n')
  recvmovement(listensocket)
else:
  movement_detect()
