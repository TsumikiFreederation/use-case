"""
<Program Name>
  outstandingseq.r2py

<Started>
  Aug 17, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  All methods related to the outstanding packets data structure. 
"""


def rangeinsert(first, second, outstandingseq, index):
  """ 
  Insert range [first, second] in outstandingseq at index.
  """
  
  if index == len(outstandingseq):
    outstandingseq.append([])
    
  if first == second:
    outstandingseq[index] = [first]
  else:
    outstandingseq[index] = [first, second]
              

# IB: I would like to see tests for these outstandingseq methods. They might
# be correct, but I can't tell and it's easier to check with unit-tests.
def delfromoutstandingseq(seq, outstandingseq):
  """
  Delete seq from the sequence range. Add new range if necessary.
  """
  
  for subrange in outstandingseq:      
    index = outstandingseq.index(subrange)

    if len(subrange) == 1:
      if seq == subrange[0]:
        outstandingseq.remove(subrange)  
        # IB: Don't you want a "break" statement here?
    else:
      left, right = subrange 
      # IB: You don't need this next if statement -- instead, change the next else to be
      # "else if right > seq". This will improve code readibility.
      if right >= seq:
        if right == seq:  # change to [left, right-1] 
          rangeinsert(left, right-1, outstandingseq, index)         
          # IB: Don't you also need to remove the subrange from outstandingseq?
          # Or, will rangeinsert do that?
        else: # right > seq
          if left == seq:  # change to [left+1, right]
            rangeinsert(left+1, right, outstandingseq, index)
          else: # left < seq < right: change to [left, seq-1], [seq+1, right]
            # IB: Why is left < seq at this point?
            rangeinsert(left, seq-1, outstandingseq, index)
            rangeinsert(seq+1, right, outstandingseq, index+1)
        break
        
      # IB: Do not need the next two lines -- they seem to be no-ops to me.
      #
      else: # none of the above cases
        continue


def addtooutstandingseq(seq, outstandingseq):
  """
  Add seq to the sequence range. 
  """
 
  if outstandingseq == []:
    outstandingseq.append([seq])
  else:      
    for subrange in outstandingseq[::-1]:         
      index = outstandingseq.index(subrange)

      if len(subrange) == 1:  
        right = subrange[0]
        left = right
      else: # len(subrange) == 2
        left, right = subrange 

      # IB: throw an exception if this should not occur. Do not ignore errors.
      #
      if right > seq:  # this case shouldn't exist: send 12 before 11
        continue        

      if right < seq - 1:  # [[1,3], [5,7], [10]]: now send seq 12
        outstandingseq.append([seq])   # [[1,3], [5,7], [10], [12]]
      elif right == seq - 1:  # [[1,3], [5,7], [10]]: now send seq 11
        outstandingseq[index] = [left, seq]

      break


 
def findlessthan(outstandingseq, seqlimit):
  """
  Find in outstandingseq all the seq numbers that are less than seqlimit.
  """
  
  lessthanseqlimit = []

  for subrange in outstandingseq:
    if len(subrange) == 1:
      left = subrange[0]
      if left <= seqlimit:
        lessthanseqlimit.append(left)
      else:
        return lessthanseqlimit
    else:  # len(subrange) == 2
      left, right = subrange
      for num in range(left, right+1):
        if num <= seqlimit:
          lessthanseqlimit.append(num)
        else:
          return lessthanseqlimit
