"""
<Program Name>
  outstandingseq.r2py

<Started>
  Aug 17, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  All methods related to the outstanding packets data structure. 
"""

class PacketSendException(Exception):
  """
  Handle when packet x is sent before y and x>y.
  """

  
class RangeException(Exception):
  """
  Handle cases related to sequence range.
  """

  
def rangeinsert(first, second, outstandingseq, index):
  """ 
  Insert range [first, second] in outstandingseq at index.
  """
  
  if first == second:
    outstandingseq.insert(index, [first])
  else:
    outstandingseq.insert(index, [first, second])
              

def delfromoutstandingseq(seq, outstandingseq):
  """
  Delete seq from the sequence range. Add new range if necessary.
  """
  
  for subrange in outstandingseq:      
    index = outstandingseq.index(subrange)

    if len(subrange) == 1:
      if seq == subrange[0]:
        outstandingseq.remove(subrange)  
        return
    else:
      left, right = subrange 
      if left <= seq:
        if right == seq:  # change to [left, right-1] 
          outstandingseq.remove(subrange)  
          rangeinsert(left, right-1, outstandingseq, index) 
          return        
        elif right > seq:
          if left == seq:  # change to [left+1, right]
            outstandingseq.remove(subrange)  
            rangeinsert(left+1, right, outstandingseq, index)
            return
          else: # left < seq < right: change to [left, seq-1], [seq+1, right]
            rangeinsert(left, seq-1, outstandingseq, index)
            del outstandingseq[index+1]
            rangeinsert(seq+1, right, outstandingseq, index+1)
            return
          
  #raise RangeException("Packet seq not found", 
  #          [str(seq) + " is not in outstandingseq: " + str(outstandingseq)])    


def addtooutstandingseq(seq, outstandingseq):
  """
  Add seq to the sequence range. 
  """
 
  if outstandingseq == []:
    outstandingseq.append([seq])
  else:      
    for subrange in outstandingseq[::-1]:         
      index = outstandingseq.index(subrange)

      if len(subrange) == 1:  
        right = subrange[0]
        left = right
      else: # len(subrange) == 2
        left, right = subrange 

      if right > seq:  # this case shouldn't exist: send 12 before 11
        log("packet " + str(right) + " sent before " + str(seq) + ".\n")
        raise PacketSendException("Packet send out of order", 
                                  [str(right) + " sent before " + str(seq)])        

      if right < seq - 1:  # [[1,3], [5,7], [10]]: now send seq 12
        outstandingseq.append([seq])   # [[1,3], [5,7], [10], [12]]
      elif right == seq - 1:  # [[1,3], [5,7], [10]]: now send seq 11
        outstandingseq[index] = [left, seq]

      break


 
def findlessthan(outstandingseq, seqlimit):
  """
  Find in outstandingseq all the seq numbers that are less than seqlimit.
  """
  
  lessthanseqlimit = []
  num = 0
  
  for subrange in outstandingseq:
    if len(subrange) == 1:
      num = subrange[0]
      if num <= seqlimit:
        lessthanseqlimit.append(num)      
    else:  # len(subrange) == 2
      left, right = subrange
      for num in range(left, right+1):
        if num <= seqlimit:
          lessthanseqlimit.append(num)
          
    if num >= seqlimit:
      return lessthanseqlimit


def removelessthan(outstandingseq, seqlimit):
  """
  seq's smaller than seqlimit in outstandingseq) are 
  considered lost: remove them all.
  """
  
  for subrange in outstandingseq:      
    index = outstandingseq.index(subrange)
    if len(subrange) == 1:
      right = subrange[0]
      if right <= seqlimit:
        outstandingseq[index] = []  
    else:  # len(subrange) == 2
      left, right = subrange 
      if right <= seqlimit:
        outstandingseq[index] = []  
      else:  # right > seqlimit
        if left <= seqlimit:  # left <= seqlimit < right
          if seqlimit+1 == right:
            outstandingseq[index] = [right]
          else:
            outstandingseq[index] = [seqlimit+1, right]
          break

  emptyindex = []
  for subrange in outstandingseq: 
    if subrange == []:
      emptyindex.append(outstandingseq.index(subrange))

  for index in emptyindex:
    del outstandingseq[index]
