"""
<Program Name>
  ut_receiver.r2py

<Started>
  Aug 25, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  A receiver that observes the ralationship between packet loss and throughput.
"""

dy_import_module_symbols("outstandingseq.r2py")


def deserializepacket(packet):    
  """
  Returns the sequence of the packet, and payload length in bits.
  """
  seq, payload = packet.split("|")
  return (seq, len(packet)*8)  # 1 byte = 8 bits


def checklossrate():
  """
  Calculates loss rate.
  """
  numlost = 0
  for subrange in outstandingseq:
    if len(subrange) == 1:
      numlost = numlost + 1
    else:    
      left, right = subrange 
      numlost = numlost + (right - left + 1)

  lossrate = float(numlost)/NUMPKTS
  log(str(numlost) + " packets were lost out of " + 
    str(NUMPKTS) + ". lossrate: " + str(lossrate) + '\n')
  return lossrate
  

def recvack():

  totalbits = 0   # record total bytes received
  totaltime = 0
  throughput = 0  
  lastchecktime = getruntime()   # record total time spent over a CYCLE 
  
  while True: 
          
    try:     
      # receive packets from sender
      remoteip, remoteport, message = listensocket.getmessage()
      # if there is SocketWouldBlockError, the rest will be skipped
        
      (seq, payloadlen) = deserializepacket(message)   
      totalbits = totalbits + payloadlen       
      #log(seq + '\n')

      delfromoutstandingseq(int(seq), outstandingseq)
      currenttime = getruntime()
      totaltime = currenttime - lastchecktime
      
      if totaltime > CYCLE:
        # check throughput and movement every CYCLE sec
        lastchecktime = currenttime # reset clock
        throughput = float(totalbits)/(totaltime)/1000000 
        log(str(throughput) + "\n")
        totalbits = 0
        
    except SocketWouldBlockError:
      currenttime = getruntime()
      timeouttime = currenttime - lastchecktime
      if timeouttime > TIMEOUT:
        checklossrate()
        #log(str(totaltime) + '\n')
        break
      #pass


def detect():
  def filter():
    """
    Returns the square root of the sum of squares of the 3 acceleration directions (X,Y,Z), 
    which have been collected by the phone and filtered as per:
    http://seattlesensor.wordpress.com/2013/01/01/accelerometer-sensor-data-processing/
    """
    a = 0.1
    sensor_data = [None, None, None]

    # Ensure accel. data properly collected and assigned to sensor_data
    while(sensor_data[0] == None or sensor_data[1] == None  or sensor_data[2] == None):
        sensor_data = request_data(sensor_socket, 'sensorsReadAccelerometer', [])

    Xi =  sensor_data[0]
    Yi =  sensor_data[1]
    Zi =  sensor_data[2]

    X0 =  accel[0]
    Y0 =  accel[1]
    Z0 =  accel[2]

    # Apply high-pass filter
    Xh = Xi - (a*X0 + (1-a)*Xi)
    Yh = Yi - (a*Y0 + (1-a)*Yi)
    Zh = Zi - (a*Z0 + (1-a)*Zi)

    # Apply low-pass filter
    Xl = Xh * a + X0 * (1 - a)
    Yl = Yh * a + Y0 * (1 - a)
    Zl = Zh * a + Z0 * (1 - a)

    # Return square root of sum of squares
    return (Xl ** 2 + Yl ** 2 + Zl ** 2) ** 0.5

  dy_import_module_symbols("sensorlib.r2py")
  port = get_connectionport()
  sensor_socket = getconnection(port)
  request_data(sensor_socket, 'startSensingTimed', [1, 50])

  accel = [0,0,0]
  t = 0

  # Start by collecting accel. data for 100 loops, but only use data after 
  # first 50 loops, when the filtered accel. data has plateaued.

  # Phone should be motionless during this time
  for i in range (1, 150):
    try:
      ss = filter()

      if (i > 99):
        t += ss

      sleep(0.05)

    except Exception as e:
      log(str(e), '\n')
      sensor_socket.close()
      raise

  # Average collected data to use as threshold
  t = t/50
  #sensor_data = request_data(sensor_socket, 'ttsSpeak', ['Threshold set to ' + str(round(t, 3))])

  # Thresholds for indicating start/stop of movements
  tStop = t * 0.065
  tStart = t * 0.075

  # Count is used as a marker of how many times you have significantly exceeded the threshold
  count = 0
  # Moving is the flag indicating whether or not the user is moving
  moving = False

  while(True):
    try:
      ss = filter()

      if (moving):
        if ((t - tStop) < ss < (t + tStop)):
          # It takes more "counts" to "stop" moving than to "start" moving, to avoid indicating a
          # stopped user, when theyare only changing acceleration (i.e. if phone in is pants pocket)
          if (count == 5):
            #sensor_data = request_data(sensor_socket, 'ttsSpeak', ["Stop"])
            moving = False
            count = 0
          else:
            count += 1
        else:
          count = 0
      else:
        if ((t - tStart) > ss or ss > (t + tStart)):
          if (count == 2):
            #sensor_data = request_data(sensor_socket, 'ttsSpeak', ["Start"])
            moving = True
            count = 0
          else:
            count += 1
        else:
          count = 0

      sleep(0.01)

    except Exception as e:
      log(str(e), '\n')
      sensor_socket.close()
      raise

  request_data(sensor_socket, 'stopSensing', [])
  sensor_socket.close()


############ define protocol parameters ############   
NUMPKTS = 50000 # number of packets to send for each sleeptime
TIMEOUT = 5 # number of rounds to timeout packets (very rough)
outstandingseq = [[1, NUMPKTS]]

CYCLE = 1  # time duration to calculate throughput

(localip, localport) = (getmyip(), 63101)
listensocket = listenformessage(localip, localport)
log(getmyip() + '\n')

createthread(detect)
recvack()
