"""
<Program Name>
  ut_receiver.r2py

<Started>
  Aug 25, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  A receiver that observes the ralationship between packet loss and throughput.
"""

dy_import_module_symbols("outstandingseq.r2py")


def deserializepacket(packet):    
  """
  Returns the sequence of the packet, and payload length in bits.
  """
  seq, payload = packet.split("|")
  return (seq, len(packet)*8)  # 1 byte = 8 bits


def checklossrate():
  """
  Calculates loss rate.
  """
  numlost = 0
  for subrange in outstandingseq:
    if length(subrange) == 1:
      numlost = numlost + 1
    else:    
      left, right = subrange 
      numlost = numlost + (right - left + 1)

  lossrate = float(numlost)/NUMPKTS
  log("lossrate: " + str(lossrate) + '\n')
  return lossrate
  

def recvack():

  totalbits = 0   # record total bytes received
  totaltime = 0
  throughput = 0 
  counter = 0  
  lastchecktime = getruntime()   # record total time spent over a CYCLE 
  
  while True: 
    try:     
      # receive packets from sender
      remoteip, remoteport, message = listensocket.getmessage()
      # if there is SocketWouldBlockError, the rest will be skipped
        
      (seq, payloadlen) = deserializepacket(message)   
      totalbits = totalbits + payloadlen       
      #log(seq + '\n')

      delfromoutstandingseq(int(seq), outstandingseq)
      currenttime = getruntime()
      totaltime = currenttime - lastchecktime
      if totaltime > CYCLE:
        # check throughput and movement every CYCLE sec
        lastchecktime = currenttime # reset clock
        throughput = float(totalbits)/(totaltime)/1000000 
        log("recv rate " + str(throughput) + " Mbps\n")
        totalbits = 0

        counter = counter + 1
        if counter > TIMEOUT:
          checklossrate()
          break
        
    except SocketWouldBlockError:
      pass


############ define protocol parameters ############   
NUMPKTS = 1000 # number of packets to send for each sleeptime
TIMEOUT = 10 # number of rounds to timeout packets (very rough)
outstandingseq = [[1, NUMPKTS]]

CYCLE = 1  # time duration to calculate throughput

(localip, localport) = (getmyip(), 63101)
listensocket = listenformessage(localip, localport)
log(getmyip() + '\n')

recvack()
