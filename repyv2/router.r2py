"""
<Program Name>
  router.r2py

<Started>
  July 24, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Router as the data sender, for the use case of rate adaptation.
"""

############ define protocol parameters ############ 
LENGTH = 9000    # packet length (change for different tx rates)
SEQ = 0          # sequence number of packets
WIN = 300     # check packet loss every WIN ack
DEBUG = 1     # output some debug messages if DEBUG == 1


def getlocalipport():
  localip = getmyip()
  localport = 63100
  return (localip, localport)


def getdestipport():
  destip = getmyip()  # this needs to be changed to phone's IP
  destport = 63101
  return (destip, destport)


def translatemessage(message):
  if "|" in message:
    seq, move = message.split("|")
  else:
    seq = message
    move = None
  return (seq, move)


def recvack(routerlistensocket, sequence):

  def ack():
    while True:
      try:
        # receive ack and movement hint from client
        remoteip, remoteport, message = routerlistensocket.getmessage()
        (seq, move) = translatemessage(message)

        if DEBUG == 1:
          if move != None:
            log("received " + seq + "th packet. movement: " + move + "\n")
          else:
            log("received " + seq + "th packet. no movement.\n")

        try:   
          sequence.remove(int(seq))
        except ValueError:
          log(seq + " not in the sequence of pkts sent.\n")
          pass

        if DEBUG == 1:
          log("after receive, seq queue: " + str(sequence) + "\n")

      except SocketWouldBlockError:
        pass

  return ack


############ main program ############ 

(localip, localport) = getlocalipport()
(destip, destport) = getdestipport()

# router's socket for client's ack
routerlistensocket = listenformessage(localip, localport)

# initial variables
starttime = getruntime()
sequence = []

# thread that receives acks
createthread(recvack(routerlistensocket, sequence))


while True:
  # router send a bunch of packets to the client
  packet = [SEQ, '0'*LENGTH]
  sequence.append(SEQ)  # record the sent seq

  sendmessage(destip, destport, str(packet), localip, localport)

  if DEBUG == 1:
    log("sending " + str(SEQ) + "th packet. sending seq queue: " + str(sequence) + "\n")

  if SEQ != 0 and SEQ % WIN == 0:
    # check pkt loss   
    sleep(0.5)  # wait for outstanding pkt to arrive
    log("lost seqs: " + str(sequence) + '\n')

  SEQ = SEQ + 1