"""
<Program Name>
  router.r2py

<Started>
  July 24, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Router as the data sender, for the use case of rate adaptation.
"""

############ define protocol parameters ############ 
LENGTH = 9200    # packet length (change for different tx rates)
SEQ = 1          # sequence number of packets, starting from 1
WIN = 10     # check packet loss every WIN ack
DEBUG = 1     # output some debug messages if DEBUG == 1


def getlocalipport():
  localip = getmyip()
  localport = 63100
  return (localip, localport)


def getdestipport():
  destip = getmyip()  # this needs to be changed to phone's IP
  destport = 63101
  return (destip, destport)


def translatemessage(message):
  if "|" in message:
    seq, move = message.split("|")
  else:
    seq = message
    move = None
  return (seq, move)


def estimateRTT(recentobservedRTTs):
  # return twice the max value of recent RTTs
  return max(recentobservedRTTs)*2


def recvack(routerlistensocket, sequence, recentobservedRTTs):

  def ack(): 

    while True:
      try:
        # receive ack and movement hint from client
        remoteip, remoteport, message = routerlistensocket.getmessage()
        recvtime = getruntime()
        (seq, move) = translatemessage(message)

        try:   
          if int(seq) in sequence:  # delete seq upon ack
            sendtime = sequence[int(seq)]
            del sequence[int(seq)]
            log(seq + "th pkt send time: " + str(sendtime) + "  receive time: " + str(recvtime) + "\n")
            rtt = recvtime - sendtime
            recentobservedRTTs.append(rtt)
            if len(recentobservedRTTs) > WIN: # update RTT for every WIN packets
              recentobservedRTTs.pop(0)

            for (id, sendtime) in sequence.iteritems():
              if sendtime < getruntime() - estimateRTT(recentobservedRTTs):
                log(str(id) + "th packet too old.. delete\n")
                del sequence[int(seq)]
                
        except KeyError:
          log(seq + " not in the sequence of pkts sent.\n")
          pass
        

        if DEBUG == 1:
          if move != None:
            log("received " + seq + "th packet. movement: " + move + "\n")
          else:
            log("received " + seq + "th packet. no movement.\n")
          log("after received " + seq + "th packet, seq queue: " + str(sequence) + "\n")
          
        log("recentobservedRTTs: " + str(recentobservedRTTs) + "\n\n")

      except SocketWouldBlockError:
        pass

  return ack


def checkRTT(RTT, sequence):

  def rtt():
    log("in checkRTT: RTT over last " + str(WIN) + " packets: " + str(RTT) + ' s.\n')
    for s in sequence:
      if getruntime() > s[1] + RTT: # timeout
        # TODO: signal packet loss 
        log(str(s) + " timeout!\n")

  return rtt


############ main program ############ 

(localip, localport) = getlocalipport()
(destip, destport) = getdestipport()

# router's socket for client's ack
routerlistensocket = listenformessage(localip, localport)

# initial variables
starttime = getruntime()
sequence = {}
recentobservedRTTs = []  # initially set to a large value
sequencelock = createlock()

# thread that receives acks
createthread(recvack(routerlistensocket, sequence, recentobservedRTTs))
#createthread(checkRTT(recentobservedRTTs, sequence))

while True:
  # router send a bunch of packets to the client
  packet = [SEQ, '0'*LENGTH]
  sequence[SEQ] = getruntime()  # record (seq, sendtime)

  sendmessage(destip, destport, str(packet), localip, localport)

  if DEBUG == 1:
    log("sending " + str(SEQ) + "th packet. sending seq queue: " + str(sequence) + "\n")

  SEQ = SEQ + 1
  starttime = getruntime()
