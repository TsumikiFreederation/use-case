#
# IB: Refactor the repyv2/; particularly move this file out of the repyv2/ directory.
#

"""
<Program Name>
  router.r2py

<Started>
  July 24, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Router as the data sender, for the use case of rate adaptation.
"""

dy_import_module_symbols("outstandingseq.r2py")
dy_import_module_symbols("routercommon.r2py")



def rapidsample(now, RTT, numlost, packetinfo):
  """
  Given lost packets, adjust sending rate. 
  """
  
  if numlost != []: # loss happened, slow down 
    #log("1. loss happened\n")
    #failedTime[currentbitrate[0]] = now
    for num in numlost:
      rateofnum, sendtime = packetinfo[num]
      m_failedTime[rateofnum] = sendtime + 2*RTT
     
    if m_ratesample[0] == 1:      # if we are sampling a higher rate
      bitrate = m_lastbitrate[0]  # set bitrate to this higher rate
      m_ratesample[0] = 0    # mark stop sampling
      #log("1.1 sampling, keep same\n")
    else:   # set bitrate to a lower rate
      largerthancurrent = []
      for t in g_sleeptime:
        if t > m_currentbitrate[0]:
          largerthancurrent.append(t)
      if largerthancurrent != []:
        bitrate = min(largerthancurrent)
      else:
        bitrate = max(g_sleeptime)
      #bitrate = min(currentbitrate[0] + SLEEPSTEPSIZE, 
      #              max(sleeptime))  # 0.1/1000: step size of sleeptime
      #log("1.2 no sampling, lower rate (longer sleep time)\n")
                
  else: # no loss, speed up
    #log("2. no loss\n")
    m_ratesample[0] = 0  # by default, we don't sample higher rates

    # (1) if the current rate has been successful in the past successTimeout sec
    if now - m_pickedTime[m_currentbitrate[0]] > m_successTimeout:
      nofail = []
      for tau in g_sleeptime:
        # (2) find the highest rate that has not failed in the past failureTimeout sec 
        if now - m_failedTime[tau] > m_failureTimeout and tau < m_currentbitrate[0]:
          nofail.append(tau)          

      if nofail != []:
        bitrate = min(nofail)      
        #log("2.1 found a higher rate (shorter sleep time), start sampling\n")
        m_ratesample[0] = 1   # mark it that we start to sample this higher rate
        m_lastbitrate[0] = bitrate  # record this higher bitrate      
      else: 
        bitrate = m_currentbitrate[0]
        #log("2.2 did not find a better rate. do not sample\n")
        
    else: # the current bit rate has failed in the past 0.005sec
      bitrate = m_currentbitrate[0]
      #log("2.3 did not find a better rate. do not sample\n")  

  if bitrate != m_currentbitrate[0]:
    m_pickedTime[bitrate] = now  # update time when bitrate was picked
    #log("picking new sleep time " + str(bitrate) + " at time " + str(now) + "\n")
      
  m_currentbitrate[0] = bitrate
  #log("current sleep time: " + str(currentbitrate[0]) + '\n\n')
  
  
    
def checkloss(now, RTT, packetinfo, outstandingseq):
  """
  Every 2*RTT check pkt loss, delete outdated packets.
  """

  oldseq = []
  for (seq, (rate, sendtime)) in packetinfo.items():
    if sendtime < (now - 2*RTT):
      # if a packet was sent more than 2*RTT ago, it's considered lost
      oldseq.append(seq)

  rapidsample(now, RTT, oldseq, packetinfo)
  
  if oldseq != []:
    seqlimit = max(oldseq)  # find the largest seq in lostseq
    numlost = findlessthan(outstandingseq, seqlimit)  
    
    # Remove all numlost from packetinfo
    for seq in numlost:
      if int(seq) in packetinfo:
        try:
          del packetinfo[int(seq)]
        except KeyError:
          # possibily recvack got this seq's ack
          #log(seq + "th not in the sequence (recvack got this seq's ack?).\n")
          pass

    # packets older than 2RTT (seq's smaller than seqlimit in 
    # outstandingseq) are considered lost: remove them all 
    removelessthan(outstandingseq, seqlimit)
    
  else:
    logifdebug(G_DEBUG, "num lost (packets older than 2RTT): None\n\n")
    
      

def sendpackets(sequenceno, packetinfo, outstandingseq):
  """
  Sends packets to the receiver.
  """
  # following variables are for calculating throughput
  totalbits = 0   # record total bytes received
  totaltime = 0
  throughput = 0                 # initial rate is 0
  payload = "|" + '0'*G_LENGTH
  lastchecktime = getruntime()   # record total time spent over a CYCLE 

  while True:     
    # router sends a bunch of packets to the client
    (packet, timestamp) = prepsendpacket(sequenceno, payload)

    if G_MOVE[0]: # mobile 
      # based on recently observed RTTs, find/check/remove packets older than 2RTT
      rateadjust(m_currentbitrate[0], timestamp, packetinfo, outstandingseq)
      
    else:  # static
      if ispermanent(sequenceno) == 0: # temp packets: select temp rate for this seq number
        if s_temppacketset[0] == 0:
          # we haven't selected a temp rate for this train of packets
          selecttemprate(lostseq, currentbitrate[0])
          temppacketset[0] = 1
        timetosleep = currentbitrate[1]              
      else:  # permanent packets
        temppacketset[0] = 0
        # based on recently observed RTTs, find/check/remove packets older than 2RTT
        rateadjust(s_currentbitrate[0], timestamp, packetinfo, outstandingseq)
        timetosleep = s_currentbitrate[0]

    # save info for this seq no -- rate and timestamp
    packetinfo[sequenceno] = (m_currentbitrate[0], timestamp)
      
    g_listlock.acquire(True)
    addtooutstandingseq(sequenceno, g_outstandingseq)
    g_listlock.release()
    
    ###############
    sendmessage(destip, destport, str(packet), localip, localport)
    ###############
    
    sleep(m_currentbitrate[0])  # sleep for currentbitrate sec
    """
    totalbits = totalbits + len(packet)*8
    currenttime = getruntime()
    totaltime = currenttime - lastchecktime
    if totaltime > CYCLE:
      # check throughput and movement every CYCLE sec
      lastchecktime = currenttime # reset clock
      throughput = float(totalbits)/(totaltime)/1000000 
      #log("sleep time " + str(currentbitrate[0]) + "sec, send rate " 
      #    + str(throughput) + " Mbps\n")
      totalbits = 0  # reset bits"""

    sequenceno = sequenceno + 1
  

def main():
  """
  The main funciton.
  """

  # initial variables
  sequenceno = 1   # sequence number of packets
  
  # thread that receives ack from the receiver, removes it from 
  # packetinfo, and update the recently observed RTT
  createthread(recvack(g_routerlistensocket, g_packetinfo, 
                     g_recentobservedRTTs, g_outstandingseq))

  # thread that resets the failures for each rate every 10sec 
  #createthread(resetstats())
  # TODO: this is only needed in static case

  sendpackets(sequenceno, g_packetinfo, g_outstandingseq)



############ define protocol parameters ############  

######### mobile parameters #########
m_successTimeout = 1
m_failureTimeout = 5
m_pickedTime = {}   # global variable recording the time when a rate was picked
m_failedTime = {}   # global variable recording the time when a rate failed

for tau in g_sleeptime:
  m_failedTime[tau] = 0

# Python only treats lists, tuples and dicts as global variables.
m_currentbitrate = [0]    # global variable that controls sleeping time
m_ratesample = [0]        # global variable indicating if we are sampling the rate
m_lastbitrate = []        # global variable recording the last rate we picked
m_lastbitrate.append(m_currentbitrate[0])
m_pickedTime[m_currentbitrate[0]] = getruntime()


######### static parameters #########
S_RESETWIN = 10    # number of secs to reset packet stats
S_NUMLOSS = 4      # if NUMLOSS happened consecutively, change rate  
S_WINSIZE = 1000     # the last 100 in 1000 are temp packets, others are permanent
S_PERMSEQTHRESH = 900         # if packet seq falls in this range [1, 900), it's permanent
s_currentbitrate = [0, 0]    # global variable that controls sleeping time 
                           # (perm rate, temp rate)
s_lostseq = {}            # record the lost packet sequence for each rate
s_ratefailed = {}         # record if a rate has failed in the past 10 sec
s_temppacketset = [0]     # global variable that indicates temp packets rate already set

for rate in g_sleeptime:  
  # initialize data struct for link stats 
  s_lostseq[float(rate)] = []
  s_ratefailed[float(rate)] = [False, None]

log("my IP: " + localip + '\n')
      
main()

############ end of main() ############ 

