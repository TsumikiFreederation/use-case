#
# IB: Refactor the repyv2/; particularly move this file out of the repyv2/ directory.
#

"""
<Program Name>
  router.r2py

<Started>
  July 24, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Router as the data sender, for the use case of rate adaptation.
"""

dy_import_module_symbols("routercommon.r2py")
dy_import_module_symbols('random.r2py')


#################### static methods ##################

def ispermanent(seq):
  """
  Return if a packet seq # is temporary (0) or not (1). 
  Static only.
  """
  if (seq % S_WINSIZE) <= S_PERMSEQTHRESH:
    return 1
  return 0


def existconsecutivelosses(seqlist, n):
  """
  Find if there are n consequtive numbers in the lost packet 
  sequence when using rate.
  """
  for i in range(0, n-1):
    if seqlist[i+1] != seqlist[i] + 1:
      return False
  return True


def findnoconsecutivefails(lostseq, oldrate, num):
  """
  Find candidate rates that are other than oldrate, and have num
  consecutive failures.
  """
  candidates = []
  
  for t in g_sleeptime:
    if t != oldrate:
      if s_ratefailed[t][0] == False:
        candidates.append(t)
      
  return candidates



def selectpermrate(s_lostseq, oldrate):
  """
  Select the highest rate without NUMLOSS successive failures if exist.
  Otherwise select the rate with lowest average transmission time.
  """
  selected = None  
  candidates = findnoconsecutivefails(s_lostseq, oldrate, S_NUMLOSS)
      
  if candidates != []:  # select the highest rate that has no NUMLOSS succcessive fails
    s_currentbitrate[0] = min(candidates)
    # TODO: what do we do in the else case?? (under-specified in the NSDI paper)
    # Otherwise select the rate with lowest average transmission time??
    #log("new perm rate (highest rate with no successive NUMLOSS fails): " 
    #    + str(currentbitrate[0]) + '\n\n')     
    


def selecttemprate(lostseq, oldrate):
  """
  Select a random rate that (1) has not failed NUMLOSS successive times and 
  (2) have a minimum transmission time lower than the currentrate's (oldrate)
  average transmission time.
  """
  candidate = findnoconsecutivefails(lostseq, oldrate, S_NUMLOSS) # find rates with no NUMLOSS fails
  random_shuffle(candidate)  # random shuffling rates

  # calculate avg transmission time
  current_txtime = rateavgtxtime(s_recentobservedRTTs, oldrate)
    
  #log("avg tx time of " + str(oldrate) + ":" + str(current_txtime) + '\n')
  #log("min tx time: among " + str(candidate) + " (has no NUMLOSS succcessive fails): \n") 
  for rate in candidate:
    minrate = ratemintxtime(s_recentobservedRTTs, rate)
    #log(str(rate) + ":" + str(minrate) + '\n')
    # set the temp rate if it satisfies the condition
    if minrate <= current_txtime:
      s_currentbitrate[1] = rate
      return
      
  #log("new temp rate set at seq: " + str(currentbitrate[1]) + '\n\n')


def selectfastrate():
  """
  Select the rate with the lowest transmission time (fastest rate).
  """
  txtime = {}

  for t in g_sleeptime:
    if s_ratefailed[t][0]:
      continue
    else:
      txtime[t] = rateavgtxtime(s_recentobservedRTTs, t)

  if txtime == {}:
    if s_currentbitrate[0] > 1:
      s_currentbitrate[0] = g_sleeptime[s_currentbitrate[0]-1]
    else:
      s_currentbitrate[0] = g_sleeptime[0]
    #currentbitrate[0] = max(currentbitrate[0]-SLEEPSTEPSIZE, sleeptime[0])
  else:
    s_currentbitrate[0] = min(txtime, key=txtime.get)   # the rate that has the lowest tx time
  #log("new perm rate (rate with lowest tx time): " 
  #          + str(currentbitrate[0]) + '\n\n')
    

    
def checkpermloss(now, RTT, g_packetinfo, g_outstandingseq):
  """
  Every 2*RTT check pkt loss, delete outdated packets.
  """
  if g_packetinfo == {}:
    return
  
  timethresh = now - 2*RTT

  # list of (seq, (rate, sendtime))
  packetlist = g_packetinfo.items()  
  # sort list by first field -- packet seq number
  packetlist.sort()     

  # record the packet seq that need to check (two RTTs ago): [firstid, lastid]
  firstid = min(g_packetinfo)
  lastid = 0
  #log(str(packetlist) + "\nchecking time before: " + str(timethresh) + "\n\n")
  
  for (seq, (rate, sendtime)) in packetlist:
    # packetlist is sorted, so lostseq[rate] preserves seq order
    # if a packet was sent more than 2RTT ago and not ack-ed, it's considered lost
    if sendtime < timethresh:
      s_lostseq[rate].append(seq)  
      lastid = seq
      #log(str(seq) + ', ' + str(rate) + ', ' + str(sendtime) + '\n')
      if len(s_lostseq[rate]) == S_NUMLOSS:
        # check if it contains NUMLOSS (NUMLOSS) seccesive ids
        if existconsecutivelosses(s_lostseq[rate], S_NUMLOSS):
          # remember this failure, if threading, grab lock
          s_ratefailed[rate] = [True, sendtime]
          s_lostseq[rate] = []
        else:
          # delete the first id (even they are not NUMLOSS seccesive ids)
          # always keep <= 3 ids
          s_lostseq[rate].pop(0)
    else:
      # guaranteed to have greater timestamps for all packets with
      # larger seq no in packetlist
      break
    
  # done checking lost packets for the past 2RTTs 
  if lastid >= firstid:
    currentpermrate = s_currentbitrate[0]
    if s_ratefailed[currentpermrate][0]:
      selectpermrate(s_lostseq, currentpermrate)
    else:
      # fast rate
      selectfastrate()

    # clean up packets older than 2*RTTs
    if g_outstandingseq != []:
      numlost = findlessthan(g_outstandingseq, lastid) 
      
      for seq in numlost:
        try:
          del g_packetinfo[seq]
        except KeyError:
          # possibily recvack got this seq's ack
          pass
      removelessthan(g_outstandingseq, lastid)
  else:
    # fast rate
    selectfastrate()


#################### mobile methods ##################
    
def rapidsample(now, RTT, numlost, g_packetinfo):
  """
  Given lost packets, adjust sending rate. 
  """
  
  if numlost != []: # loss happened, slow down 
    #log("1. loss happened\n")
    #failedTime[currentbitrate[0]] = now
    for num in numlost:
      rateofnum, sendtime = g_packetinfo[num]
      m_failedTime[rateofnum] = sendtime + 2*RTT
     
    if m_ratesample[0] == 1:      # if we are sampling a higher rate
      bitrate = m_lastbitrate[0]  # set bitrate to this higher rate
      m_ratesample[0] = 0    # mark stop sampling
      #log("1.1 sampling, keep same\n")
    else:   # set bitrate to a lower rate
      if m_currentbitrate[0] < len(g_sleeptime) - 1:
        bitrate = g_sleeptime[m_currentbitrate[0]+1]
      else:
        bitrate = g_sleeptime[-1]
      #bitrate = min(currentbitrate[0] + SLEEPSTEPSIZE, 
      #              max(sleeptime))  # 0.1/1000: step size of sleeptime
      #log("1.2 no sampling, lower rate (longer sleep time)\n")
                
  else: # no loss, speed up
    #log("2. no loss\n")
    m_ratesample[0] = 0  # by default, we don't sample higher rates

    # (1) if the current rate has been successful in the past successTimeout (1) sec
    if now - m_pickedTime[m_currentbitrate[0]] > m_successTimeout:
      nofail = []
      for tau in g_sleeptime:
        # (2) find the highest rate that has not failed in the past failureTimeout (1) sec 
        if now - m_failedTime[tau] > m_failureTimeout and tau < m_currentbitrate[0]:
          nofail.append(tau)          

      if nofail != []:
        bitrate = min(nofail)      
        #log("2.1 found a higher rate (shorter sleep time), start sampling\n")
        m_ratesample[0] = 1   # mark it that we start to sample this higher rate
        m_lastbitrate[0] = bitrate  # record this higher bitrate      
      else: 
        bitrate = m_currentbitrate[0]
        #log("2.2 did not find a better rate. do not sample\n")
        
    else: # the current bit rate has failed in the past 0.005sec
      bitrate = m_currentbitrate[0]
      #log("2.3 did not find a better rate. do not sample\n")  

  if bitrate != m_currentbitrate[0]:
    m_pickedTime[bitrate] = now  # update time when bitrate was picked
    #log("picking new sleep time " + str(bitrate) + " at time " + str(now) + "\n")
      
  m_currentbitrate[0] = bitrate
  #log("current sleep time: " + str(currentbitrate[0]) + '\n\n')




def checkloss(now, RTT, g_packetinfo, g_outstandingseq):
  """
  Every 2*RTT check pkt loss, delete outdated packets.
  """

  oldseq = []
  for (seq, (rate, sendtime)) in g_packetinfo.items():
    if sendtime < (now - 2*RTT):
      # if a packet was sent more than 2*RTT ago, it's considered lost
      oldseq.append(seq)

  rapidsample(now, RTT, oldseq, g_packetinfo)
  
  if oldseq != []:
    seqlimit = max(oldseq)  # find the largest seq in lostseq
    numlost = findlessthan(g_outstandingseq, seqlimit)  
    
    # Remove all numlost from packetinfo
    for seq in numlost:
      if int(seq) in g_packetinfo:
        try:
          del g_packetinfo[int(seq)]
        except KeyError:
          # possibily recvack got this seq's ack
          #log(seq + "th not in the sequence (recvack got this seq's ack?).\n")
          pass

    # packets older than 2RTT (seq's smaller than seqlimit in 
    # outstandingseq) are considered lost: remove them all 
    removelessthan(g_outstandingseq, seqlimit)
    
  else:
    logifdebug(G_DEBUG, "num lost (packets older than 2RTT): None\n\n")

    

def rateadjust(currentbitrate, timestamp, g_packetinfo, g_outstandingseq):
  """
  Adjust rate every 2RTTs.
  """
  if G_MOVE[0]: # mobile 
    if m_recentobservedRTTs != []:
      RTT = estimateRTT(m_recentobservedRTTs)
      if g_oldestpktsendtime != [] and (timestamp - g_oldestpktsendtime[0]) > 2*RTT:
        g_listlock.acquire(True)
        checkloss(timestamp, RTT, g_packetinfo, g_outstandingseq)
        if g_packetinfo != {}:
          _, g_oldestpktsendtime[0] = firstsendtime(g_packetinfo)
        g_listlock.release()        
  else: # static    
    if s_recentobservedRTTs[currentbitrate] != []:  # static differentiates rate
      RTT = estimateRTT(s_recentobservedRTTs[currentbitrate])
      if g_oldestpktsendtime != [] and (timestamp - g_oldestpktsendtime[0]) > 2*RTT:
        g_listlock.acquire(True)
        checkpermloss(timestamp, RTT, g_packetinfo, g_outstandingseq)  
        if g_packetinfo != {}:
          _, g_oldestpktsendtime[0] = firstsendtime(g_packetinfo)
        g_listlock.release()


def resetstats(RESETWIN):
  """
  A closure that resets packet stats every RESETWIN secs.
  """
  def reset():
    """
    Inside of the closure
    """
    while True:
        sleep(RESETWIN)
        currentime = getruntime()
        #log("resetting stats...\n")
        for rate in g_sleeptime:  
          if s_ratefailed[rate][1] != None and s_ratefailed[rate][1] < currentime - RESETWIN:
            # automatically expires packet info if older than RESETWIN secs
            s_ratefailed[rate] = [False, None]
            # reset observation about RTTs for the rate
            s_recentobservedRTTs[rate] = []
            
        del m_recentobservedRTTs[:]
      
  return reset



def sendpackets(sequenceno, g_packetinfo, g_outstandingseq):
  """
  Sends packets to the receiver.
  """
  # following variables are for calculating throughput
  totalbits = 0   # record total bytes received
  totaltime = 0
  throughput = 0                 # initial rate is 0
  payload = "|" + '0'*G_LENGTH
  lastchecktime = getruntime()   # record total time spent over a CYCLE 

  while True:     
    # router sends a bunch of packets to the client
    (packet, timestamp) = prepsendpacket(sequenceno, payload)
    #log("sending " + str(sequenceno) + "th at " + str(timestamp) + '\n')

    if G_MOVE[0]: # mobile 
      # clear all data structures once detecting a movement change
      #cleanup()
        
      # based on recently observed RTTs, find/check/remove packets older than 2RTT
      rateadjust(m_currentbitrate[0], timestamp, g_packetinfo, g_outstandingseq)
      timetosleep = m_currentbitrate[0]
      
    else:  # static
      # clear all data structures once detecting a movement change
      #cleanup()

      if ispermanent(sequenceno) == 0: # temp packets: select temp rate for this seq number
        if s_temppacketset[0] == 0:
          # we haven't selected a temp rate for this train of packets
          selecttemprate(s_lostseq, s_currentbitrate[0])
          s_temppacketset[0] = 1
        timetosleep = s_currentbitrate[1]              
      else:  # permanent packets
        s_temppacketset[0] = 0
        # based on recently observed RTTs, find/check/remove packets older than 2RTT
        rateadjust(s_currentbitrate[0], timestamp, g_packetinfo, g_outstandingseq)
        timetosleep = s_currentbitrate[0]

    #log("selected rate " + str(timetosleep * G_SLEEPINTERVAL) +  
    #    " for " + str(sequenceno) + '\n')
    
    # save info for this seq no -- rate and timestamp
    g_packetinfo[sequenceno] = (timetosleep, timestamp)
      
    g_listlock.acquire(True)
    addtooutstandingseq(sequenceno, g_outstandingseq)
    g_listlock.release()

    #log("sending thead:\ng_packetinfo: " + str(g_packetinfo) + '\n')
    #log("g_outstandingseq: " + str(g_outstandingseq) + '\n\n')
    
    ###############
    sendmessage(destip, destport, str(packet), localip, localport)
    ###############
    
    sleep(timetosleep * G_SLEEPINTERVAL)  # sleep for currentbitrate sec
    
    totalbits = totalbits + len(packet)*8
    currenttime = getruntime()
    totaltime = currenttime - lastchecktime
    if totaltime > G_CYCLE:
      # check throughput and movement every CYCLE sec
      lastchecktime = currenttime # reset clock
      throughput = float(totalbits)/(totaltime)/1000000 
      log("send rate " + str(throughput) + " Mbps\n")
      totalbits = 0  # reset bits

    sequenceno = sequenceno + 1
  

def main():
  """
  The main funciton.
  """

  sequenceno = 1   # sequence number of packets
  
  # thread that receives ack from the receiver, removes it from 
  # packetinfo, and update the recently observed RTT
  createthread(recvack(g_routerlistensocket, g_packetinfo, g_outstandingseq))

  # thread that resets the failures for each rate every 10sec 
  createthread(resetstats(S_RESETWIN))

  sendpackets(sequenceno, g_packetinfo, g_outstandingseq)



############ define protocol parameters ############  

######### mobile parameters #########
m_successTimeout = 0.5
m_failureTimeout = 1
m_pickedTime = {}   # global variable recording the time when a rate was picked
m_failedTime = {}   # global variable recording the time when a rate failed

for tau in g_sleeptime:
  m_failedTime[tau] = 0

# Python only treats lists, tuples and dicts as global variables.
m_currentbitrate = [0]    # global variable that controls sleeping time
m_ratesample = [0]        # global variable indicating if we are sampling the rate
m_lastbitrate = []        # global variable recording the last rate we picked
m_lastbitrate.append(m_currentbitrate[0])
m_pickedTime[m_currentbitrate[0]] = getruntime()


######### static parameters #########
S_RESETWIN = 10    # number of secs to reset packet stats
S_NUMLOSS = 4      # if NUMLOSS happened consecutively, change rate  
S_WINSIZE = 1000     # the last 100 in 1000 are temp packets, others are permanent
S_PERMSEQTHRESH = 900         # if packet seq falls in this range [1, 900), it's permanent
s_currentbitrate = [0, 0]    # global variable that controls sleeping time 
                           # (perm rate, temp rate)
s_lostseq = {}            # record the lost packet sequence for each rate
s_ratefailed = {}         # record if a rate has failed in the past 10 sec
s_temppacketset = [0]     # global variable that indicates temp packets rate already set

for rate in g_sleeptime:  
  # initialize data struct for link stats 
  s_lostseq[float(rate)] = []
  s_ratefailed[float(rate)] = [False, None]

log("my IP: " + localip + '\n')
      
main()

############ end of main() ############ 

