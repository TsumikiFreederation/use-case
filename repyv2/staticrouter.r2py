#
# IB: Refactor the repyv2/; particularly move this file out of the repyv2/ directory.
#

"""
<Program Name>
  staticrouter.r2py

<Started>
  Aug 15, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Router as the data sender, for the use case of rate adaptation.
"""

dy_import_module_symbols("outstandingseq.r2py")
dy_import_module_symbols("routercommon.r2py")  
dy_import_module_symbols('random.r2py') 
  

def ispermanent(seq):
  """
  Return if a packet seq # is temporary (0) or not (1).
  """
  if (seq % WINSIZE) <= PERMSEQTHRESH:
    return 1
  return 0
    

def existconsecutivelosses(seqlist, n):
  """
  Find if there are n consequtive numbers in the lost packet 
  sequence when using rate.
  """
  for i in range(0, n-1):
    if seqlist[i+1] != seqlist[i] + 1:
      return False
  return True



def findnoconsecutivefails(lostseq, oldrate, num):
  """
  Find candidate rates that are other than oldrate, and have num
  consecutive failures.
  """
  candidates = []
  
  for t in sleeptime:
    if t != oldrate:
      if ratefailed[t][0] == False:
        candidates.append(t)
      
  return candidates


def selectfastrate():
  """
  Select the rate with the lowest transmission time.
  """
  txtime = {}

  for t in sleeptime:
    if ratefailed[t][0]:
      continue
    else:
      txtime[t] = rateavgtxtime(recentobservedRTTs, t)

  if txtime == {}:
    lessthancurrent = []
    for t in sleeptime:
      if t < currentbitrate[0]:
        lessthancurrent.append(t)
    if lessthancurrent != []:
      currentbitrate[0] = max(lessthancurrent)
    else:
      currentbitrate[0] = sleeptime[0]
    #currentbitrate[0] = max(currentbitrate[0]-SLEEPSTEPSIZE, sleeptime[0])
  else:
    currentbitrate[0] = min(txtime, key=txtime.get)   # the rate that has the lowest tx time
  #log("new perm rate (rate with lowest tx time): " 
  #          + str(currentbitrate[0]) + '\n\n')

  

def selectpermrate(lostseq, oldrate):
  """
  Select the highest rate without NUMLOSS successive failures if exist.
  Otherwise select the rate with lowest average transmission time.
  """
  selected = None  
  candidates = findnoconsecutivefails(lostseq, oldrate, NUMLOSS)
      
  if candidates != []:  # select the highest rate that has no NUMLOSS succcessive fails
    currentbitrate[0] = min(candidates)
    # TODO: what do we do in the else case?? (under-specified in the NSDI paper)
    # Otherwise select the rate with lowest average transmission time??
    #log("new perm rate (highest rate with no successive NUMLOSS fails): " 
    #    + str(currentbitrate[0]) + '\n\n')     
    


def selecttemprate(lostseq, oldrate):
  """
  Select a random rate that (1) has not failed NUMLOSS successive times and 
  (2) have a minimum transmission time lower than the currentrate's (oldrate)
  average transmission time.
  """
  candidate = findnoconsecutivefails(lostseq, oldrate, NUMLOSS) # find rates with no NUMLOSS fails
  random_shuffle(candidate)  # random shuffling rates

  # calculate avg transmission time
  current_txtime = rateavgtxtime(recentobservedRTTs, oldrate)
    
  #log("avg tx time of " + str(oldrate) + ":" + str(current_txtime) + '\n')
  #log("min tx time: among " + str(candidate) + " (has no NUMLOSS succcessive fails): \n") 
  for rate in candidate:
    minrate = ratemintxtime(recentobservedRTTs, rate)
    #log(str(rate) + ":" + str(minrate) + '\n')
    # set the temp rate if it satisfies the condition
    if minrate <= current_txtime:
      currentbitrate[1] = rate
      return
      
  #log("new temp rate set at seq: " + str(currentbitrate[1]) + '\n\n')


  

    
def checkpermloss(sequenceno, now, RTT, packetinfo, outstandingseq):
  """
  Every 2*RTT check pkt loss, delete outdated packets.
  """
  if packetinfo == {}:
    return
  
  timethresh = now - 2*RTT

  # list of (seq, (rate, sendtime))
  packetlist = packetinfo.items()  
  # sort list by first field -- packet seq number
  packetlist.sort()     

  # record the packet seq that need to check (two RTTs ago): [firstid, lastid]
  firstid = min(packetinfo)
  lastid = 0
  #log(str(packetlist) + "\nchecking time before: " + str(timethresh) + "\n\n")
  
  for (seq, (rate, sendtime)) in packetlist:
    # packetlist is sorted, so lostseq[rate] preserves seq order
    # if a packet was sent more than 2RTT ago and not ack-ed, it's considered lost
    if sendtime < timethresh:
      lostseq[rate].append(seq)  
      lastid = seq
      #log(str(seq) + ', ' + str(rate) + ', ' + str(sendtime) + '\n')
      if len(lostseq[rate]) == NUMLOSS:
        # check if it contains NUMLOSS (NUMLOSS) seccesive ids
        if existconsecutivelosses(lostseq[rate], NUMLOSS):
          # remember this failure, if threading, grab lock
          ratefailed[rate] = [True, sendtime]
          lostseq[rate] = []
        else:
          # delete the first id (even they are not NUMLOSS seccesive ids)
          # always keep <= 3 ids
          lostseq[rate].pop(0)
    else:
      # guaranteed to have greater timestamps for all packets with
      # larger seq no in packetlist
      break
    
  # done checking lost packets for the past 2RTTs 
  if lastid >= firstid:
    currentpermrate = currentbitrate[0]
    if ratefailed[currentpermrate][0]:
      selectpermrate(lostseq, currentpermrate)
    else:
      # fast rate
      selectfastrate()

    # clean up packets older than 2*RTTs
    if outstandingseq != []:
      numlost = findlessthan(outstandingseq, lastid) 
      
      for seq in numlost:
        try:
          del packetinfo[seq]
        except KeyError:
          # possibily recvack got this seq's ack
          pass
      removelessthan(outstandingseq, lastid)
  else:
    # fast rate
    selectfastrate()


    
def recvack(routerlistensocket, packetinfo, 
                     recentobservedRTTs, outstandingseq):
  """
  A closure that receives ack from the receiver, removes it from 
  packetinfo, and update the recently observed RTT
  """
  
  def ack():      
    """
    Inside of the closure
    """

    while True:      
      try:
        # receive ack and movement hint from client
        remoteip, remoteport, message = routerlistensocket.getmessage()
        # if there is SocketWouldBlockError, the rest will be skipped
        
        now = getruntime()
        (seq, move) = deserialize(message)  # TODO: use movement info 

        listlock.acquire(True)
        delfromoutstandingseq(int(seq), outstandingseq)
        listlock.release()
      
        if int(seq) in packetinfo:
          rate, sendtime = packetinfo[int(seq)]
          
          try:  # delete seq upon ack
            del packetinfo[int(seq)]           
          except KeyError:
            pass

          newrtt = now - sendtime  # update RTT for each rate
          recentobservedRTTs[rate].append(newrtt)
          if len(recentobservedRTTs[rate]) > RTTWIN: # only keep RTTWIN most recent RTTs
            recentobservedRTTs[rate].pop(0)

      except SocketWouldBlockError:
        pass

  return ack


def sendpackets(sequenceno, packetinfo, outstandingseq):
  """
  Sends packets to the receiver.
  """
  payload = "|" + '0'*LENGTH
   
  while True:     
    # router sends a bunch of packets to the client
    packet = str(sequenceno) + payload
    timestamp = getruntime()  

    # initialize the time when we sent the oldest, un-acked packet
    if oldestpktsendtime == []:
      oldestpktsendtime.append([])
      oldestpktsendtime[0] = timestamp  

    if ispermanent(sequenceno) == 0: # temp packets: select temp rate for this seq number
      if temppacketset[0] == 0:
        # we haven't selected a temp rate for this train of packets
        #log("1.0 temp packet " + str(sequenceno) + " at " + str(currentbitrate[0]) + " ")
        selecttemprate(lostseq, currentbitrate[0])
        temppacketset[0] = 1
      timetosleep = currentbitrate[1]
              
    else:  # permanent packets
      temppacketset[0] = 0
      # based on recently observed RTTs, find/check/remove packets older than 2RTT
      if recentobservedRTTs[currentbitrate[0]] != []:
        RTT = estimateRTT(recentobservedRTTs[currentbitrate[0]])
        if (timestamp - oldestpktsendtime[0]) > 2*RTT:
          listlock.acquire(True)
          # check loss, set perm rate
          checkpermloss(sequenceno, timestamp, RTT, packetinfo, outstandingseq)
          if packetinfo != {}:
            _, oldestpktsendtime[0] = firstsendtime(packetinfo)
          listlock.release()
      timetosleep = currentbitrate[0]

    # save info for this seq no -- rate and timestamp
    packetinfo[sequenceno] = (timetosleep, timestamp)
    
    listlock.acquire(True)
    addtooutstandingseq(sequenceno, outstandingseq)
    listlock.release()

    ###############
    sendmessage(destip, destport, str(packet), localip, localport)
    ###############
    
    sleep(timetosleep)    
    sequenceno = sequenceno + 1

    
def resetstats():
  """
  A closure that resets packet stats every RESETWIN secs.
  """
  def reset():
    """
    Inside of the closure
    """
    while True:
      sleep(RESETWIN)
      currentime = getruntime()
      #log("resetting stats...\n")
      for rate in sleeptime:  
        if ratefailed[rate][1] != None and ratefailed[rate][1] < currentime - RESETWIN:
          # automatically expires packet info if older than RESETWIN secs
          ratefailed[rate] = [False, None]
          # reset observation about RTTs for the rate
          recentobservedRTTs[rate] = []
      
  return reset


def main():
  """
  The main funciton.
  """

  # router's socket for client's ack
  routerlistensocket = listenformessage(localip, localport)

  # initial variables
  sequenceno = 1   # sequence number of packets, starting from 1
  outstandingseq = []    # record outstanding packets
  packetinfo = {}    # dict of (seq: (rate, sendtime))

  # thread that receives ack from the receiver, removes it from 
  # packetinfo, and update the recently observed RTT
  createthread(recvack(routerlistensocket, packetinfo, 
                     recentobservedRTTs, outstandingseq))

  # thread that resets the failures for each rate every 10sec 
  createthread(resetstats())

  sendpackets(sequenceno, packetinfo, outstandingseq)


############ define protocol parameters ############   
LENGTH = 1000    # packet length (change for different tx rates)
DEBUG = 0        # output some debug messages if DEBUG == 1 
RTTWIN = 30      # keep the most recent for RTTWIN packets
RESETWIN = 10    # number of secs to reset packet stats
NUMLOSS = 4      # if NUMLOSS happened consecutively, change rate  
WINSIZE = 1000     # the last 100 in 1000 are temp packets, others are permanent
PERMSEQTHRESH = 900         # if packet seq falls in this range [1, 900), it's permanent
currentbitrate = [0, 0]    # global variable that controls sleeping time 
                           # (perm rate, temp rate)
recentobservedRTTs = {} # record the most recent RTTWIN RTTs for each rate
lostseq = {}            # record the lost packet sequence for each rate
ratefailed = {}         # record if a rate has failed in the past 10 sec
temppacketset = [0]     # global variable that indicates temp packets rate already set

for rate in sleeptime:  
  # initialize data struct for link stats
  recentobservedRTTs[float(rate)] = []  
  lostseq[float(rate)] = []
  ratefailed[float(rate)] = [False, None]

listlock = createlock() # to sync data structure updates in different threads
oldestpktsendtime = []   # record the time when the oldest pkt was sent

(localip, localport) = (getmyip(), 63100)
(destip, destport) = ('206.87.195.106', 63101)  # this needs to be phone's IP

log("my IP: " + localip + '\n')

main()
############ end of main() ############ 

