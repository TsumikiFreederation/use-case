#
# IB: Refactor the repyv2/; particularly move this file out of the repyv2/ directory.
#

"""
<Program Name>
  staticrouter.r2py

<Started>
  Aug 15, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Router as the data sender, for the use case of rate adaptation.
"""

dy_import_module_symbols("outstandingseq.r2py")
dy_import_module_symbols("routercommon.r2py")  
dy_import_module_symbols('random.r2py') 
  

def ispermanent(seq):
  """
  Return if a packet seq # is temporary (0) or not (1).
  Only the first packet in the temporary window needs new rate
  selection, thus all other temp packets get return None.
  """
  # IB: need better comment: "permanent" is an undefined keyword.

  draw = random_int_below(WINSIZE+1) # draw a random packet for sampling
  
  if draw % WINSIZE == 0:
    log(str(seq) + " is temp, sampling.\n")
    return 0
  else:
    log(str(seq) + " is perm\n")
    return 1
    

def existconsequtivelosses(lostseq, rate, n):
  """
  Find if there are n consequtive numbers in the lost packet 
  sequence when using rate.
  """
  loss = lostseq[rate]

  if loss == []:
    return False

  left = right = None
  for x in loss + [-1]:
    if x - 1 == right:
      right += 1
    else:
      if left:
        if right - left >= n-1:
          return True
      left = right = x
      
  return False


def findcandidate(lostseq, oldrate, num):
  """
  Find candidate rates that are other than oldrate, and have num
  consecutive failures.
  """
  candidate = []
  for t in sleeptime:
    if t!= oldrate and existconsequtivelosses(lostseq, t, num) == False:
      candidate.append(t)
      
  return candidate



def selectpermrate(lostseq, oldrate):
  """
  Select the highest rate without 4 successive failures if exist.
  Otherwise select the rate with lowest average transmission time.
  """
  selected = None  
  candidate = findcandidate(lostseq, oldrate, 4)
      
  if candidate != []:  # select the highest rate that has no 4 succcessive fails
    currentbitrate[0] = min(candidate)
    log("1.1.1 new sleep time (highest rate with no successive 4 fails): " 
        + str(currentbitrate[0]) + '\n\n')     
       
  else:   # no candidate found: select the rate with lowest avg tx time
    txtime = {}
    for t in sleeptime:
      RTTlist = recentobservedRTTs[t]
      if RTTlist != []:
        avgtxtime = sum(RTTlist)/len(RTTlist)
        log("rate: " + str(t) + " avg txtime: " + str(avgtxtime) + '\n')
        txtime[t] = avgtxtime
      else:
        log("rate: " + str(t) + " avg txtime: 0\n")
        txtime[t] = 0

    minrate = min(txtime, key=txtime.get)   # the index of rate that has the lowest tx time
    currentbitrate[0] = minrate
    log("1.1.2 no candidate found. new sleep time (rate with lowest tx time): " 
        + str(currentbitrate[0]) + '\n\n')


def selecttemprate(lostseq, oldrate):
  """
  Select a random rate that (1) has not failed n successive times and 
  (2) have a minimum transmission time lower than the currentrate's 
  average transmission time.
  """
  candidate = findcandidate(lostseq, oldrate, 4)
  random_shuffle(candidate)  # random shuffling rates
  
  currentRTTs = recentobservedRTTs[oldrate]
  if currentRTTs != []:
    current_txtime = sum(currentRTTs)/len(currentRTTs)
  else:
    current_txtime = 0
  
  for rate in candidate:
    RTTlist = recentobservedRTTs[rate]
    if RTTlist == []:
      minrate = 0
    else:
      minrate = min(RTTlist)
        
    log("min tx time: among " + str(candidate) + 
          " (has no 4 succcessive fails): " + str(minrate) + '\n')
    if minrate < current_txtime:
      currentbitrate[0] = rate
      break
      
  log("new sleep time: " + str(currentbitrate[0]) + '\n\n')


  
def samplerate(sequenceno, now, lostseq):
  """
  Given lost packets, adjust sending rate. 
  """

  oldrate = currentbitrate[0]
  permanent = ispermanent(sequenceno)
  
  if permanent == 1:
    if existconsequtivelosses(lostseq, oldrate, 4) == True:
      log("1.1 successive 4 fails happened at rate " + str(oldrate) + ". ")
      selectpermrate(lostseq, oldrate)
    else:
      log("1.2 fewer than successive 4 fails happened at rate " + str(oldrate) + "\n\n")
      
  elif permanent == 0: # first temp packet needs new rate
    # select a random rate that (1) has no 4 succcessive fails and 
    # (2) min(txtime) < avg(current txtime)
    log("2.0 temp packets at " + str(oldrate) + " ")
    selecttemprate(lostseq, oldrate)
    
    

def checkloss_static(sequenceno, now, RTT, packetsequence, outstandingseq, lostseq):
  """
  Every 2*RTT check pkt loss, delete outdated packets.
  """

  for (id, (rate, sendtime)) in packetsequence.items():
    if sendtime < (now - 2*RTT):
      # if a packet was sent more than 2*RTT ago, it's considered lost
      lostseq[rate].append(id)  

  samplerate(sequenceno, now, lostseq)

  for rate in sleeptime:
    if lostseq[rate] != []:
      seqlimit = max(lostseq[rate])  # find the largest seq in lostseq
      numlost = findlessthan(outstandingseq, seqlimit)  
    
      # Remove all numlost from packetsequence
      for seq in numlost:
        if int(seq) in packetsequence:
          try:
            del packetsequence[int(seq)]
          except KeyError:
            # possibily recvack got this seq's ack
            log(seq + "th not in the sequence (recvack got this seq's ack?).\n")
            pass

      # packets older than 2RTT (seq's smaller than seqlimit in 
      # outstandingseq) are considered lost: remove them all 
      removelessthan(outstandingseq, seqlimit)
      lostseq[rate] = []


    
def recvack(routerlistensocket, packetsequence, 
                     recentobservedRTTs, outstandingseq):
  """
  A closure that receives ack from the receiver, removes it from 
  packetsequence, and update the recently observed RTT
  """
  
  def ack():      
    """
    Inside of the closure
    """

    while True:      
      try:
        # receive ack and movement hint from client
        remoteip, remoteport, message = routerlistensocket.getmessage()
        # if there is SocketWouldBlockError, the rest will be skipped
        
        now = getruntime()
        (seq, move) = deserialize(message)  # TODO: use movement info 

        listlock.acquire(True)
        delfromoutstandingseq(int(seq), outstandingseq)
        listlock.release()
      
        if int(seq) in packetsequence:
          rate, sendtime = packetsequence[int(seq)]
          
          try:  # delete seq upon ack
            del packetsequence[int(seq)]           
          except KeyError:
            pass

          newrtt = now - sendtime  # update RTT for each rate
          recentobservedRTTs[rate].append(newrtt)
          if len(recentobservedRTTs[rate]) > RTTWIN: # only keep RTTWIN most recent RTTs
            recentobservedRTTs[rate].pop(0)

      except SocketWouldBlockError:
        pass

  return ack


def sendpackets(sequenceno, packetsequence, outstandingseq):
  """
  Sends packets to the receiver.
  """
  while True:     
    # router sends a bunch of packets to the client
    packet = str(sequenceno) + "|" + '0'*LENGTH 
    timestamp = getruntime()  # record (seq, sendtime)
    packetsequence[sequenceno] = (currentbitrate[0], timestamp)
    
    listlock.acquire(True)
    addtooutstandingseq(sequenceno, outstandingseq)
    listlock.release()
    sendmessage(destip, destport, str(packet), localip, localport)

    if oldestpktsendtime == []:
      oldestpktsendtime.append([])
      oldestpktsendtime[0] = timestamp
    
    # based on recently observed RTTs, find/check/remove packets older than 2RTT
    if recentobservedRTTs[currentbitrate[0]] != []:
      RTT = estimateRTT(recentobservedRTTs[currentbitrate[0]])
      if oldestpktsendtime != [] and (timestamp - oldestpktsendtime[0]) > 2*RTT:
        listlock.acquire(True)
        checkloss_static(sequenceno, timestamp, RTT, packetsequence, outstandingseq, lostseq)
        listlock.release()
        del oldestpktsendtime[0:len(oldestpktsendtime)]
    
    sleep(currentbitrate[0])  # sleep for currentbitrate sec
    sequenceno = sequenceno + 1
  

def main():
  """
  The main funciton.
  """

  # router's socket for client's ack
  routerlistensocket = listenformessage(localip, localport)

  # initial variables
  sequenceno = 1   # sequence number of packets, starting from 1
  outstandingseq = []    # record outstanding packets
  packetsequence = {}    # dict of (seq: (rate, sendtime))

  # thread that receives ack from the receiver, removes it from 
  # packetsequence, and update the recently observed RTT
  createthread(recvack(routerlistensocket, packetsequence, 
                     recentobservedRTTs, outstandingseq))

  sendpackets(sequenceno, packetsequence, outstandingseq)


############ define protocol parameters ############   
LENGTH = 1000    # packet length (change for different tx rates)
DEBUG = 0     # output some debug messages if DEBUG == 1 
RTTWIN = 30     # keep the most recent for RTTWIN packets

WINSIZE = 10  # the last 100 in 1000 are temp packets, others are permanent
sleeptime = [0, 0.1/1000, 0.2/1000, 0.3/1000, 0.4/1000, 0.5/1000, 
             0.6/1000, 0.7/1000, 0.8/1000, 0.9/1000, 1.0/1000]  # hard coded

currentbitrate = [0]    # global variable that controls sleeping time
recentobservedRTTs = {} # record the most recent RTTWIN RTTs for each rate
lostseq = {}            # record the lost packet sequence for each rate
#temppacket = [0]       # global variable that indicates it's the start of temp packets

for rate in sleeptime:  
  # initialize data struct for link stats
  recentobservedRTTs[rate] = []  
  lostseq[rate] = []
    
listlock = createlock() # to sync data structure updates in different threads
oldestpktsendtime = []   # record the time when the oldest pkt was sent

(localip, localport) = (getmyip(), 63100)
(destip, destport) = ('206.87.194.70', 63101)  # this needs to be phone's IP

log("my IP: " + localip + '\n')

main()
############ end of main() ############ 

