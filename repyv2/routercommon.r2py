"""
<Program Name>
  routercommon.r2py

<Started>
  Aug 20, 2014

<Author>
  Yanyan Zhuang

<Purpose>
  Common methods and variables used by router code. 
"""

dy_import_module_symbols("outstandingseq.r2py")


############ global protocol parameters ############   

# NSDI paper has 8 rates, we have 11
g_sleeptime = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
G_SLEEPINTERVAL = 0.0001
  
G_LENGTH = 1000    # packet length (change for different tx rates)
G_RTTWIN = 30     # keep the most recent for RTTWIN packets
G_DEBUG = 0     # output some debug messages if DEBUG == 1 
                # TODO: make this a command line arg

G_CYCLE = 1  # time duration in seconds to calculate throughput
G_MOVE = [0] # global variable indicating whether the user is moving (1) or static (0)
             # update every packet
G_ALGMOBILE = [0] # global variable indicating whether to use mobile (1) or static alg (0)
                  # update every sec 
G_PREVALGMOBILE = [0] # do cleanup if it's different from G_ALGMOBILE

# initialize data struct for RTTs
s_recentobservedRTTs = {}  # record the most recent RTTWIN RTTs
m_recentobservedRTTs = []  # mobile RTTs don't care about rates

for rate in g_sleeptime:  
  s_recentobservedRTTs[rate] = []  

g_listlock = createlock()  # to sync data structure updates in different threads
g_oldestpktsendtime = []   # record the time when the oldest pkt was sent

g_outstandingseq = []    # record outstanding packets
g_packetinfo = {}        # dict of (seq: rate, sendtime)

(localip, localport) = (getmyip(), 63100)
(destip, destport) = ('206.87.193.68', 63101)  # this is phone's IP
g_routerlistensocket = listenformessage(localip, localport) # router's socket for client's ack


def cleanup():
  """
  Once detecting a movement change, clear all previous 
  data structures. Ignore super fast changes (not move 
  -> move -> not move in a very short time).
  """

  # clean up packet info and outstanding packets
  g_packetinfo.clear()  # make a dictionary empty {}
  del g_outstandingseq[:] # make a list empty []

  # clean up RTTs
  for rate in g_sleeptime:  
    s_recentobservedRTTs[rate] = []     
  del m_recentobservedRTTs[:]
  

def deserialize(message):      
  """
  Returns the sequence of the packet, and movement hint.
  """
  if "|" in message:
    seq, move = message.split("|")
  else:
    seq = message
    move = None
  return (int(seq), move)


def logifdebug(DEBUG, string):
  """
  Prints out string if DEBUG == 1.
  """
  if DEBUG == 1:
    log(string + '\n')
  else: 
    return 


def estimateRTT(recentobservedRTTs):
  """
  Returns the max value of recent RTTs
  """
  return max(recentobservedRTTs)
  #return sum(recentobservedRTTs)/len(recentobservedRTTs)


def rateavgtxtime(recentobservedRTTs, rate):
  """
  Calculates the average tansmission time for a particular rate.
  """
  RTTlist = recentobservedRTTs[rate]
  
  if RTTlist != []:
    avgtxtime = sum(RTTlist)/len(RTTlist)
  else:
    avgtxtime = 0

  return avgtxtime


def ratemintxtime(recentobservedRTTs, rate):
  """
  Calculates the average tansmission time for a particular rate.
  """
  RTTlist = recentobservedRTTs[rate]

  if RTTlist != []:
    mintxtime = min(RTTlist)
  else:
    mintxtime = 0

  return mintxtime
  

def firstsendtime(packetinfo):
  """
  Find first packet in packetinfo that has not been deleted.
  """
  minsequence = min(packetinfo)  # find the smallest key
  return packetinfo[minsequence]


def prepsendpacket(sequenceno, payload):
  """
  Prepare packet header and payload. Initialize oldestpktsendtime.
  """
  packet = str(sequenceno) + payload
  timestamp = getruntime()  # record (seq, sendtime)

  if g_oldestpktsendtime == []:
    g_oldestpktsendtime.append([])
    g_oldestpktsendtime[0] = timestamp

  return (packet, timestamp)

    

def recvack(g_routerlistensocket, g_packetinfo, g_outstandingseq):
  """
  A closure that receives ack from the receiver, removes it from 
  packetinfo, and update the recently observed RTT
  """
  
  def ack():      
    """
    Inside of the closure
    """

    while True:      
      try:
        # receive ack and movement hint from client
        remoteip, remoteport, message = g_routerlistensocket.getmessage()
        # if there is SocketWouldBlockError, the rest will be skipped
        
        now = getruntime()
        (seq, move) = deserialize(message)  
        #G_MOVE[0] = int(move)  # update for each received packet

        g_listlock.acquire(True)
        delfromoutstandingseq(seq, g_outstandingseq)
        g_listlock.release()

        #log("receiving thead:\ng_packetinfo: " + str(g_packetinfo) + '\n')
        #log("g_outstandingseq: " + str(g_outstandingseq) + '\n\n')
      
        if seq in g_packetinfo:
          rate, sendtime = g_packetinfo[seq]
          
          try:  # delete seq upon ack
            del g_packetinfo[seq]           
          except KeyError:
            pass

          newrtt = now - sendtime  # update RTT for each rate
          #log("received " + str(seq) + "th at " + str(now) + " sent at " 
          #    + str(sendtime) + " with rate " + str(rate) + " with RTT " + str(newrtt)  + 'sec\n')

          if G_MOVE[0]: # mobile
            m_recentobservedRTTs.append(newrtt)
            if len(m_recentobservedRTTs) > G_RTTWIN: # only keep RTTWIN most recent RTTs
              m_recentobservedRTTs.pop(0)
          else: # static
            #log("movement indicator: " + str(G_MOVE[0]) + '\n')
            s_recentobservedRTTs[rate].append(newrtt)
            if len(s_recentobservedRTTs[rate]) > G_RTTWIN: # only keep RTTWIN most recent RTTs
              s_recentobservedRTTs[rate].pop(0)
            #log("RTTs: " + str(s_recentobservedRTTs) + '\n\n')

      except SocketWouldBlockError:
        pass

  return ack

